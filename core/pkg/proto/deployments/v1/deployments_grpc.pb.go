// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/deployments/v1/deployments.proto

package deploymentspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployClient is the client API for Deploy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployClient interface {
	// Begins a new deployment
	// Server will stream updates back to the connected client
	// on the status of the deployment
	Up(ctx context.Context, in *DeployUpRequest, opts ...grpc.CallOption) (Deploy_UpClient, error)
	// Tears down an existing deployment
	// Server will stream updates back to the connected client
	// on the status of the teardown
	Down(ctx context.Context, in *DeployDownRequest, opts ...grpc.CallOption) (Deploy_DownClient, error)
}

type deployClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployClient(cc grpc.ClientConnInterface) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) Up(ctx context.Context, in *DeployUpRequest, opts ...grpc.CallOption) (Deploy_UpClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deploy_ServiceDesc.Streams[0], "/nitric.proto.deployments.v1.Deploy/Up", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployUpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deploy_UpClient interface {
	Recv() (*DeployUpEvent, error)
	grpc.ClientStream
}

type deployUpClient struct {
	grpc.ClientStream
}

func (x *deployUpClient) Recv() (*DeployUpEvent, error) {
	m := new(DeployUpEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployClient) Down(ctx context.Context, in *DeployDownRequest, opts ...grpc.CallOption) (Deploy_DownClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deploy_ServiceDesc.Streams[1], "/nitric.proto.deployments.v1.Deploy/Down", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployDownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deploy_DownClient interface {
	Recv() (*DeployDownEvent, error)
	grpc.ClientStream
}

type deployDownClient struct {
	grpc.ClientStream
}

func (x *deployDownClient) Recv() (*DeployDownEvent, error) {
	m := new(DeployDownEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeployServer is the server API for Deploy service.
// All implementations should embed UnimplementedDeployServer
// for forward compatibility
type DeployServer interface {
	// Begins a new deployment
	// Server will stream updates back to the connected client
	// on the status of the deployment
	Up(*DeployUpRequest, Deploy_UpServer) error
	// Tears down an existing deployment
	// Server will stream updates back to the connected client
	// on the status of the teardown
	Down(*DeployDownRequest, Deploy_DownServer) error
}

// UnimplementedDeployServer should be embedded to have forward compatible implementations.
type UnimplementedDeployServer struct {
}

func (UnimplementedDeployServer) Up(*DeployUpRequest, Deploy_UpServer) error {
	return status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedDeployServer) Down(*DeployDownRequest, Deploy_DownServer) error {
	return status.Errorf(codes.Unimplemented, "method Down not implemented")
}

// UnsafeDeployServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployServer will
// result in compilation errors.
type UnsafeDeployServer interface {
	mustEmbedUnimplementedDeployServer()
}

func RegisterDeployServer(s grpc.ServiceRegistrar, srv DeployServer) {
	s.RegisterService(&Deploy_ServiceDesc, srv)
}

func _Deploy_Up_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployUpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployServer).Up(m, &deployUpServer{stream})
}

type Deploy_UpServer interface {
	Send(*DeployUpEvent) error
	grpc.ServerStream
}

type deployUpServer struct {
	grpc.ServerStream
}

func (x *deployUpServer) Send(m *DeployUpEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Deploy_Down_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployDownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployServer).Down(m, &deployDownServer{stream})
}

type Deploy_DownServer interface {
	Send(*DeployDownEvent) error
	grpc.ServerStream
}

type deployDownServer struct {
	grpc.ServerStream
}

func (x *deployDownServer) Send(m *DeployDownEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Deploy_ServiceDesc is the grpc.ServiceDesc for Deploy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deploy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.deployments.v1.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Up",
			Handler:       _Deploy_Up_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Down",
			Handler:       _Deploy_Down_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nitric/proto/deployments/v1/deployments.proto",
}
