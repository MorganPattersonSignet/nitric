// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/schedules/v1/schedules.proto

package schedulespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulesClient is the client API for Schedules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulesClient interface {
	Schedule(ctx context.Context, opts ...grpc.CallOption) (Schedules_ScheduleClient, error)
}

type schedulesClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulesClient(cc grpc.ClientConnInterface) SchedulesClient {
	return &schedulesClient{cc}
}

func (c *schedulesClient) Schedule(ctx context.Context, opts ...grpc.CallOption) (Schedules_ScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Schedules_ServiceDesc.Streams[0], "/nitric.proto.schedules.v1.Schedules/Schedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulesScheduleClient{stream}
	return x, nil
}

type Schedules_ScheduleClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type schedulesScheduleClient struct {
	grpc.ClientStream
}

func (x *schedulesScheduleClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulesScheduleClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulesServer is the server API for Schedules service.
// All implementations should embed UnimplementedSchedulesServer
// for forward compatibility
type SchedulesServer interface {
	Schedule(Schedules_ScheduleServer) error
}

// UnimplementedSchedulesServer should be embedded to have forward compatible implementations.
type UnimplementedSchedulesServer struct {
}

func (UnimplementedSchedulesServer) Schedule(Schedules_ScheduleServer) error {
	return status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}

// UnsafeSchedulesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulesServer will
// result in compilation errors.
type UnsafeSchedulesServer interface {
	mustEmbedUnimplementedSchedulesServer()
}

func RegisterSchedulesServer(s grpc.ServiceRegistrar, srv SchedulesServer) {
	s.RegisterService(&Schedules_ServiceDesc, srv)
}

func _Schedules_Schedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulesServer).Schedule(&schedulesScheduleServer{stream})
}

type Schedules_ScheduleServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type schedulesScheduleServer struct {
	grpc.ServerStream
}

func (x *schedulesScheduleServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulesScheduleServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Schedules_ServiceDesc is the grpc.ServiceDesc for Schedules service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedules_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.schedules.v1.Schedules",
	HandlerType: (*SchedulesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Schedule",
			Handler:       _Schedules_Schedule_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nitric/proto/schedules/v1/schedules.proto",
}
