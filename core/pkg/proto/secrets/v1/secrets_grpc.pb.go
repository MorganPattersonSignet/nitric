// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/secrets/v1/secrets.proto

package secretspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretManagerClient is the client API for SecretManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretManagerClient interface {
	// Updates a secret, creating a new one if it doesn't already exist
	Put(ctx context.Context, in *SecretPutRequest, opts ...grpc.CallOption) (*SecretPutResponse, error)
	// Gets a secret from a Secret Store
	Access(ctx context.Context, in *SecretAccessRequest, opts ...grpc.CallOption) (*SecretAccessResponse, error)
}

type secretManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretManagerClient(cc grpc.ClientConnInterface) SecretManagerClient {
	return &secretManagerClient{cc}
}

func (c *secretManagerClient) Put(ctx context.Context, in *SecretPutRequest, opts ...grpc.CallOption) (*SecretPutResponse, error) {
	out := new(SecretPutResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.secrets.v1.SecretManager/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretManagerClient) Access(ctx context.Context, in *SecretAccessRequest, opts ...grpc.CallOption) (*SecretAccessResponse, error) {
	out := new(SecretAccessResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.secrets.v1.SecretManager/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretManagerServer is the server API for SecretManager service.
// All implementations should embed UnimplementedSecretManagerServer
// for forward compatibility
type SecretManagerServer interface {
	// Updates a secret, creating a new one if it doesn't already exist
	Put(context.Context, *SecretPutRequest) (*SecretPutResponse, error)
	// Gets a secret from a Secret Store
	Access(context.Context, *SecretAccessRequest) (*SecretAccessResponse, error)
}

// UnimplementedSecretManagerServer should be embedded to have forward compatible implementations.
type UnimplementedSecretManagerServer struct {
}

func (UnimplementedSecretManagerServer) Put(context.Context, *SecretPutRequest) (*SecretPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedSecretManagerServer) Access(context.Context, *SecretAccessRequest) (*SecretAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}

// UnsafeSecretManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretManagerServer will
// result in compilation errors.
type UnsafeSecretManagerServer interface {
	mustEmbedUnimplementedSecretManagerServer()
}

func RegisterSecretManagerServer(s grpc.ServiceRegistrar, srv SecretManagerServer) {
	s.RegisterService(&SecretManager_ServiceDesc, srv)
}

func _SecretManager_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretManagerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.secrets.v1.SecretManager/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretManagerServer).Put(ctx, req.(*SecretPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretManager_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretManagerServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.secrets.v1.SecretManager/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretManagerServer).Access(ctx, req.(*SecretAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretManager_ServiceDesc is the grpc.ServiceDesc for SecretManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.secrets.v1.SecretManager",
	HandlerType: (*SecretManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _SecretManager_Put_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _SecretManager_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nitric/proto/secrets/v1/secrets.proto",
}
