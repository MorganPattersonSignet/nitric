// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/http/v1/http.proto

package httppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpClient is the client API for Http service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpClient interface {
	// Serve a route on an API Gateway
	Proxy(ctx context.Context, in *HttpProxyRequest, opts ...grpc.CallOption) (*HttpProxyResponse, error)
}

type httpClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpClient(cc grpc.ClientConnInterface) HttpClient {
	return &httpClient{cc}
}

func (c *httpClient) Proxy(ctx context.Context, in *HttpProxyRequest, opts ...grpc.CallOption) (*HttpProxyResponse, error) {
	out := new(HttpProxyResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.http.v1.Http/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpServer is the server API for Http service.
// All implementations should embed UnimplementedHttpServer
// for forward compatibility
type HttpServer interface {
	// Serve a route on an API Gateway
	Proxy(context.Context, *HttpProxyRequest) (*HttpProxyResponse, error)
}

// UnimplementedHttpServer should be embedded to have forward compatible implementations.
type UnimplementedHttpServer struct {
}

func (UnimplementedHttpServer) Proxy(context.Context, *HttpProxyRequest) (*HttpProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}

// UnsafeHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServer will
// result in compilation errors.
type UnsafeHttpServer interface {
	mustEmbedUnimplementedHttpServer()
}

func RegisterHttpServer(s grpc.ServiceRegistrar, srv HttpServer) {
	s.RegisterService(&Http_ServiceDesc, srv)
}

func _Http_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.http.v1.Http/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServer).Proxy(ctx, req.(*HttpProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Http_ServiceDesc is the grpc.ServiceDesc for Http service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Http_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.http.v1.Http",
	HandlerType: (*HttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proxy",
			Handler:    _Http_Proxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nitric/proto/http/v1/http.proto",
}
