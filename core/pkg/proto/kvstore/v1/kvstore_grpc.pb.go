// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: nitric/proto/kvstore/v1/kvstore.proto

package kvstorepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvStoreClient is the client API for KvStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvStoreClient interface {
	// Get an existing value
	GetKey(ctx context.Context, in *KvStoreGetRequest, opts ...grpc.CallOption) (*KvStoreGetResponse, error)
	// Create a new or overwrite an existing value
	SetKey(ctx context.Context, in *KvStoreSetRequest, opts ...grpc.CallOption) (*KvStoreSetResponse, error)
	// Delete a key and its value
	DeleteKey(ctx context.Context, in *KvStoreDeleteRequest, opts ...grpc.CallOption) (*KvStoreDeleteResponse, error)
	// Iterate over all keys in a store
	Keys(ctx context.Context, in *KvStoreKeysRequest, opts ...grpc.CallOption) (KvStore_KeysClient, error)
}

type kvStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKvStoreClient(cc grpc.ClientConnInterface) KvStoreClient {
	return &kvStoreClient{cc}
}

func (c *kvStoreClient) GetKey(ctx context.Context, in *KvStoreGetRequest, opts ...grpc.CallOption) (*KvStoreGetResponse, error) {
	out := new(KvStoreGetResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) SetKey(ctx context.Context, in *KvStoreSetRequest, opts ...grpc.CallOption) (*KvStoreSetResponse, error) {
	out := new(KvStoreSetResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/SetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) DeleteKey(ctx context.Context, in *KvStoreDeleteRequest, opts ...grpc.CallOption) (*KvStoreDeleteResponse, error) {
	out := new(KvStoreDeleteResponse)
	err := c.cc.Invoke(ctx, "/nitric.proto.kvstore.v1.KvStore/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStoreClient) Keys(ctx context.Context, in *KvStoreKeysRequest, opts ...grpc.CallOption) (KvStore_KeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &KvStore_ServiceDesc.Streams[0], "/nitric.proto.kvstore.v1.KvStore/Keys", opts...)
	if err != nil {
		return nil, err
	}
	x := &kvStoreKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KvStore_KeysClient interface {
	Recv() (*KvStoreKeysResponse, error)
	grpc.ClientStream
}

type kvStoreKeysClient struct {
	grpc.ClientStream
}

func (x *kvStoreKeysClient) Recv() (*KvStoreKeysResponse, error) {
	m := new(KvStoreKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KvStoreServer is the server API for KvStore service.
// All implementations should embed UnimplementedKvStoreServer
// for forward compatibility
type KvStoreServer interface {
	// Get an existing value
	GetKey(context.Context, *KvStoreGetRequest) (*KvStoreGetResponse, error)
	// Create a new or overwrite an existing value
	SetKey(context.Context, *KvStoreSetRequest) (*KvStoreSetResponse, error)
	// Delete a key and its value
	DeleteKey(context.Context, *KvStoreDeleteRequest) (*KvStoreDeleteResponse, error)
	// Iterate over all keys in a store
	Keys(*KvStoreKeysRequest, KvStore_KeysServer) error
}

// UnimplementedKvStoreServer should be embedded to have forward compatible implementations.
type UnimplementedKvStoreServer struct {
}

func (UnimplementedKvStoreServer) GetKey(context.Context, *KvStoreGetRequest) (*KvStoreGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKvStoreServer) SetKey(context.Context, *KvStoreSetRequest) (*KvStoreSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedKvStoreServer) DeleteKey(context.Context, *KvStoreDeleteRequest) (*KvStoreDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedKvStoreServer) Keys(*KvStoreKeysRequest, KvStore_KeysServer) error {
	return status.Errorf(codes.Unimplemented, "method Keys not implemented")
}

// UnsafeKvStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvStoreServer will
// result in compilation errors.
type UnsafeKvStoreServer interface {
	mustEmbedUnimplementedKvStoreServer()
}

func RegisterKvStoreServer(s grpc.ServiceRegistrar, srv KvStoreServer) {
	s.RegisterService(&KvStore_ServiceDesc, srv)
}

func _KvStore_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).GetKey(ctx, req.(*KvStoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/SetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).SetKey(ctx, req.(*KvStoreSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvStoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStoreServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.proto.kvstore.v1.KvStore/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStoreServer).DeleteKey(ctx, req.(*KvStoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStore_Keys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KvStoreKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KvStoreServer).Keys(m, &kvStoreKeysServer{stream})
}

type KvStore_KeysServer interface {
	Send(*KvStoreKeysResponse) error
	grpc.ServerStream
}

type kvStoreKeysServer struct {
	grpc.ServerStream
}

func (x *kvStoreKeysServer) Send(m *KvStoreKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KvStore_ServiceDesc is the grpc.ServiceDesc for KvStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.proto.kvstore.v1.KvStore",
	HandlerType: (*KvStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _KvStore_GetKey_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _KvStore_SetKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KvStore_DeleteKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Keys",
			Handler:       _KvStore_Keys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nitric/proto/kvstore/v1/kvstore.proto",
}
