// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/workers/apis (interfaces: ApiRequestHandler)

// Package mock_apis is a generated GoMock package.
package mock_apis

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apispb "github.com/nitrictech/nitric/core/pkg/proto/apis/v1"
)

// MockApiRequestHandler is a mock of ApiRequestHandler interface.
type MockApiRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockApiRequestHandlerMockRecorder
}

// MockApiRequestHandlerMockRecorder is the mock recorder for MockApiRequestHandler.
type MockApiRequestHandlerMockRecorder struct {
	mock *MockApiRequestHandler
}

// NewMockApiRequestHandler creates a new mock instance.
func NewMockApiRequestHandler(ctrl *gomock.Controller) *MockApiRequestHandler {
	mock := &MockApiRequestHandler{ctrl: ctrl}
	mock.recorder = &MockApiRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRequestHandler) EXPECT() *MockApiRequestHandlerMockRecorder {
	return m.recorder
}

// HandleRequest mocks base method.
func (m *MockApiRequestHandler) HandleRequest(arg0 string, arg1 *apispb.ServerMessage) (*apispb.ClientMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRequest", arg0, arg1)
	ret0, _ := ret[0].(*apispb.ClientMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockApiRequestHandlerMockRecorder) HandleRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockApiRequestHandler)(nil).HandleRequest), arg0, arg1)
}

// WorkerCount mocks base method.
func (m *MockApiRequestHandler) WorkerCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorkerCount indicates an expected call of WorkerCount.
func (mr *MockApiRequestHandlerMockRecorder) WorkerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerCount", reflect.TypeOf((*MockApiRequestHandler)(nil).WorkerCount))
}
