// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/worker/adapter (interfaces: Adapter)

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nitrictech/nitric/core/pkg/api/nitric/v1"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// HandleTrigger mocks base method.
func (m *MockAdapter) HandleTrigger(arg0 context.Context, arg1 *v1.TriggerRequest) (*v1.TriggerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTrigger", arg0, arg1)
	ret0, _ := ret[0].(*v1.TriggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTrigger indicates an expected call of HandleTrigger.
func (mr *MockAdapterMockRecorder) HandleTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTrigger", reflect.TypeOf((*MockAdapter)(nil).HandleTrigger), arg0, arg1)
}
