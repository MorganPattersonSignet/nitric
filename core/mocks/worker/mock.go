// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/worker (interfaces: Worker)

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nitrictech/nitric/core/pkg/api/nitric/v1"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// HandleTrigger mocks base method.
func (m *MockWorker) HandleTrigger(arg0 context.Context, arg1 *v1.TriggerRequest) (*v1.TriggerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTrigger", arg0, arg1)
	ret0, _ := ret[0].(*v1.TriggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTrigger indicates an expected call of HandleTrigger.
func (mr *MockWorkerMockRecorder) HandleTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTrigger", reflect.TypeOf((*MockWorker)(nil).HandleTrigger), arg0, arg1)
}

// HandlesTrigger mocks base method.
func (m *MockWorker) HandlesTrigger(arg0 *v1.TriggerRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlesTrigger", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HandlesTrigger indicates an expected call of HandlesTrigger.
func (mr *MockWorkerMockRecorder) HandlesTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlesTrigger", reflect.TypeOf((*MockWorker)(nil).HandlesTrigger), arg0)
}
