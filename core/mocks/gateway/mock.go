// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/plugins/gateway (interfaces: GatewayService)

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pool "github.com/nitrictech/nitric/core/pkg/worker/pool"
)

// MockGatewayService is a mock of GatewayService interface.
type MockGatewayService struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayServiceMockRecorder
}

// MockGatewayServiceMockRecorder is the mock recorder for MockGatewayService.
type MockGatewayServiceMockRecorder struct {
	mock *MockGatewayService
}

// NewMockGatewayService creates a new mock instance.
func NewMockGatewayService(ctrl *gomock.Controller) *MockGatewayService {
	mock := &MockGatewayService{ctrl: ctrl}
	mock.recorder = &MockGatewayServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayService) EXPECT() *MockGatewayServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockGatewayService) Start(arg0 pool.WorkerPool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGatewayServiceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGatewayService)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockGatewayService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockGatewayServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGatewayService)(nil).Stop))
}
